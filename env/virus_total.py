import requests
import time
import json

class VirusTotal():
    def __init__(self,apikey, retry = 5):
        self.apikey = apikey
        self.retry = retry
    
    def send_file(self, path):
        url = "https://www.virustotal.com/api/v3/files"
        headers = {
            "accept": "application/json",
            "x-apikey": self.apikey
           
        }

        files = { "file": (path, open(path,"rb"), "application/octet-stream") }
  
        response = requests.post(url, files=files, headers=headers)
        data = json.loads(response.text)
        return data['data']['links']['self']
    

    def get_report(self,link):
       

        headers = {
            "accept": "application/json",
            "x-apikey": self.apikey
        }

        response = requests.get(link, headers=headers)
        return response.text
    def score(self, path):
        retry = 0
        while True:
          
            time.sleep(60)
            try:
                url = self.send_file(path)
                time.sleep(90)
                while True:
                    report = self.get_report(url)
                    report = json.loads(report)
                    if report['data']['attributes']['status'] == "completed":
                        bad = int(report['data']['attributes']['stats']['malicious']) + int(report['data']['attributes']['stats']['suspicious'])
                        good = int(report['data']['attributes']['stats']['undetected']) + int(report['data']['attributes']['stats']['harmless'])
                        total = bad + good 
                        return (report['data']['attributes']['stats'], bad/total)
                    else:
                        time.sleep(60)
            except:
                if self.retry <= retry:
                    return ("",1)
                else:
                    retry += 1
                continue
    
    def virus_total_analysis(self, path, samples):
        results = {}
        for name in samples:
            results[name] = self.score(path + name)
        return results
    
    def print_vt(results):
        for name, data in results.items():
            try:
                print(f"Sample name: {name}")
                print(f"malicious : {data[0]['malicious']}")
                print(f"suspicious : {data[0]['suspicious']}")
                print(f"undetected : {data[0]['undetected']}")
                print(f"harmless : {data[0]['harmless']}")
                print(f"timeout : {data[0]['timeout']}")
                print(f"confirmed-timeout : {data[0]['confirmed-timeout']}")
                print(f"failure : {data[0]['failure']}")
                print(f"type-unsupported : {data[0]['type-unsupported']}")
                print(f"Score: {data[1]}")
            except:
                print("error print result")